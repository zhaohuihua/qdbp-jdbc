
## qdbc配置
## 实体类字段信息
qdbc.entityData.tableNameField = TABLE
qdbc.entityData.primaryKeyField = id
qdbc.entityData.createUserField = creatorId
qdbc.entityData.createTimeField = createTime
qdbc.entityData.updateUserField = updatorId
qdbc.entityData.updateTimeField = updateTime
## 逻辑删除字段名
qdbc.entityData.logicalDeleteField = dataState
## 逻辑删除时是否使用随机数标记数据状态: 0=不使用, 大于0表示随机数的位数
qdbc.entityData.logicalDeleteRandoms = 8
## 逻辑删除字段类
qdbc.entityData.logicalDeleteClass = com.gitee.qdbp.jdbc.test.enums.DataState
## 逻辑删除数据有效标记
qdbc.entityData.dataEffectiveFlag = NORMAL
## 逻辑删除数据无效标记
qdbc.entityData.dataIneffectiveFlag = DELETED
## 公共包名
# qdbc.entityData.commonPackages = com.xxx.beans,com.yyy.beans
## 公共字段名
## 前面配置的createUserField/createTimeField/updateUserField/updateTimeField会自动加上
# qdbc.entityData.commonFields = xxx, yyy
## 设置枚举是否默认使用ordinal: true=ordinal, false=name 
# qdbc.converter.enumConvertUseOrdinal = true
## 设置枚举例外列表: 以下列表不使用ordinal(即使用name)
# qdbc.converter.enumConvertEspecialList = com.xxx.XxxState,com.yyy.YyyState
## 设置未知类型对象转换是否启用: true=执行convertToString()转换, false=不转换直接返回对象(由JDBC处理)
# qdbc.converter.untypedObjectConvertEnabled = true
## 设置类型对象转换的例外列表: 以下列表不执行convertToString转换
# qdbc.converter.untypedObjectConvertEspecialList = java.io.File,java.awt.Image
## 设置对象(基本对象除外)转字符串是否默认使用JSON格式
# qdbc.converter.objectToStringUseJson = true
## 设置对象转字符串例外列表: 以下列表不使用JSON格式(即使用toString方法)
# qdbc.converter.objectToStringEspecialList = com.xxx.XxxEntity,com.yyy.YyyEntity

## 是否在系统启动时扫描SQL文件
## 如果启动时不扫描, 则首次获取SQL模板时会扫描(很慢)
## 所以, 一般情况下都应该配置为true, 除非系统中未使用SQL模板
qdbc.sql.template.scanOnStartup = true
## 存放SQL模板的文件夹 (多个文件夹以逗号分隔)
qdbc.sql.template.folder = settings/sqls/
## SQL模板文件后缀
qdbc.sql.template.filter = *.sql
## SQL标签库配置文件路径
qdbc.sql.taglibPath = classpath:settings/dbtags/taglib.txt

## IN语句日志采样的省略策略 (配置为0时不启用省略)
## 配置为50:5时表示超过50项时省略, 首末各保留5项
qdbc.in.sql.omitStrategy = 50:5
## 批量操作语句日志采样的省略策略 (配置为0时不启用省略)
qdbc.batch.sql.omitStrategy = 8:3

## 批量操作处理类的数据库支持版本配置
# 一个INSERT对应多个VALUES的批量新增接口 (SqlServer需要2008以上版本)
qdbc.supports.BatchInsertByMultiRowsExecutor=mysql,mariadb,db2,sqlserver.2008,sqlite.3
# UNION ALL FROM DUAL批量新增接口
qdbc.supports.BatchInsertByUnionAllFromDualExecutor=oracle
# UPDATE JOIN USING 批量更新接口
qdbc.supports.BatchUpdateByJoinUsingExecutor=mysql,mariadb
# UPDATE CASE WHEN 批量更新接口
qdbc.supports.BatchUpdateByCaseWhenExecutor=mysql,mariadb,oracle,db2

## 递归语法的关键字
# MySQL8,PostgreSQL,SQLite的是WITH RECURSIVE; DB2,SqlServer的是WITH
qdbc.recursive.keyword              = WITH RECURSIVE
qdbc.recursive.keyword.db2          = WITH
qdbc.recursive.keyword.sqlserver    = WITH

## 递归查询子节点
qdbc.recursive.find.children.options    = normal,production,oracle
qdbc.recursive.find.children.normal     = mysql.8,mariadb.10.2.2,postgresql,db2,sqlserver,sqlite.3.8.3
qdbc.recursive.find.children.production = mysql,mariadb


